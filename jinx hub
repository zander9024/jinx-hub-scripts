-- Load Rayfield
local Rayfield = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Rayfield/main/source"))()

-- Create a window
local Window = Rayfield:CreateWindow({
    Name = "My BTools Hub",
    LoadingTitle = "Loading...",
    LoadingSubtitle = "By You",
    ConfigurationSaving = {
        Enabled = false
    },
    Discord = {
        Enabled = false
    },
    KeySystem = false,
})

-- Create the tab BEFORE using it
local UniversalTab = Window:CreateTab("Universal Tools", 4483362458)

-- Services & Player Setup
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer
local humanoid = player.Character and player.Character:WaitForChild("Humanoid")
local hrp = player.Character:WaitForChild("HumanoidRootPart")
local mouse = player:GetMouse()

-- Tools State
local selectedPart = nil
local isDragging = false
local dragOffset = Vector3.new()
local resizePart = nil
local resizeDir = nil

-- Utility: Clean Destroy
local function cleanDestroy(part)
    if part then
        for _, child in ipairs(part:GetDescendants()) do
            if child:IsA("Weld") then child:Destroy() end
            if child:IsA("BasePart") and child ~= part then child:Destroy() end
        end
        part:Destroy()
    end
end

-- Give B‑Tools
UniversalTab:CreateButton({
    Name = "Give Local BTools (Client)",
    Callback = function()
        local backpack = player:WaitForChild("Backpack")

        -- Delete Tool
        local delTool = Instance.new("Tool", backpack)
        delTool.Name = "Delete"
        delTool.RequiresHandle = false
        delTool.Activated:Connect(function()
            local target = mouse.Target
            cleanDestroy(target)
        end)

        -- Drag Tool
        local dragTool = Instance.new("Tool", backpack)
        dragTool.Name = "Move"
        dragTool.RequiresHandle = false
        dragTool.Activated:Connect(function()
            local part = mouse.Target
            if part and part:IsA("BasePart") then
                selectedPart = part
                isDragging = true
                dragOffset = part.Position - mouse.Hit.p
            end
        end)
        dragTool.Deactivated:Connect(function()
            isDragging = false
            selectedPart = nil
        end)

        -- Resize Tool
        local reTool = Instance.new("Tool", backpack)
        reTool.Name = "Resize"
        reTool.RequiresHandle = false
        reTool.Activated:Connect(function()
            local part = mouse.Target
            if part and part:IsA("BasePart") then
                resizePart = part
                local hit = mouse.Hit.p - part.Position
                local abs = Vector3.new(math.abs(hit.X), math.abs(hit.Y), math.abs(hit.Z))
                if abs.X >= abs.Y and abs.X >= abs.Z then
                    resizeDir = Vector3.new(1,0,0)
                elseif abs.Y >= abs.Z then
                    resizeDir = Vector3.new(0,1,0)
                else
                    resizeDir = Vector3.new(0,0,1)
                end
            end
        end)
        reTool.Deactivated:Connect(function()
            resizePart, resizeDir = nil, nil
        end)

        Rayfield:Notify({
            Title = "Local BTools Updated",
            Content = "Improved Delete, Drag, Resize tools added.",
            Duration = 4
        })
    end
})

-- RunService Loop for Drag, Resize, and No‑Clip + Jump Block
local noclip = false
RunService.RenderStepped:Connect(function()
    -- No-Clip Behavior
    if noclip then
        humanoid.WalkSpeed = humanoid.WalkSpeed -- maintain current speed
        humanoid.JumpPower = 0
        for _, part in ipairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end

    -- Dragging
    if isDragging and selectedPart then
        selectedPart.Position = mouse.Hit.p + dragOffset
    end

    -- Resizing
    if resizePart and resizeDir then
        local delta = (mouse.Hit.p - resizePart.Position):Dot(resizeDir)
        local newSize = resizePart.Size + (resizeDir * delta * 2)
        newSize = Vector3.new(
            math.max(newSize.X, 0.1),
            math.max(newSize.Y, 0.1),
            math.max(newSize.Z, 0.1)
        )
        resizePart.Size = newSize
    end
end)
